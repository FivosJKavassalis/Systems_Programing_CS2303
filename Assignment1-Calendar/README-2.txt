Fivos Kavassalis/ fikavassalis


This C program creates a 12-month calendar for any given year (input from user) that is greater than 0. The program starts with the main() function (as always…) that calls the userInput() function which prints out a monthly calendar label, asks the user for the year of the calendar and checks if it is an integer greater than 0. If it is not, it prints an error message and requests for another input year (LOOP INVARIANT: givenYear <= 0). If the number value is valid, it prints out one more label indicating the year of the calendar. Then, the program finds the first day of the given year using the firstDayOfYear() function. This function uses a known year in which the day of the week of a particular date is known as a reference. Then by using loops, the program works backwards or forwards (depending on whether the input year is smaller or bigger). If input year is smaller,(LOOP INVARIANTS: (0 <= dayOfWeek <= 6), (givenYear < year)) the program iterates backwards to find the first day of the input year. Else, the program iterates forwards (LOOP INVARIANTS: (0 <= dayOfWeek <= 6), (givenYear > year)) from that known year date. The functions takes into consideration the possibility of a leap year (leap year adds 1 day to that year) using the isLeap() function. The isLeap() function is based in the definition of the leap year and just tests whether it is or not. (The difference between first days from one year to the next, is just one day unless a leap year is involved, which makes it 2). The program uses the returning value to start printing the calendar. The printCalendar() function iterates through a loop and prints 12 months in a calendar format using the printMonth() function (LOOP INVARIANTS: (startingDay = ((printMonthName(yearNum, monthNum) + startingDay) % 7)), (1<= i <= 12) where i is a single month).  The printMonth() function prints the name of the specific month and the given year using the printMonthName() function. The printMonthName() function has 12 different cases, one for each month, in which it prints out the month name and the given year in the calendar and also stores the total number of days for that particular month. This value is returned from this function, and will be used later in printMonth().  After that, the printMonth() function prints out the numbers of the days of a month in the correct position under the 7 days. It does that by inserting blanks until the 1st of the month is aligned (LOOP INVARIANT: (0 <= j <= firstDayMonth) where j corresponds to the days of a week before the first day of the month we are focusing on) with the corresponding day (which had been found using the firstDayOfYear() function) which that month begins with. Then, the correct positions are found for each number of the days of the month, through the use of precision (LOOP INVARIANT: (1 <= k <= numDays) where k is the number of days of the particular month). The total number of the days of the month is provided from the returning value of printMonthName(). The printMonth() function returns the starting day of the next month in sequence, a value which is used in the printCalendar() function in order to put this new value into printMonth() and do the same thing again for the next months. The problems that I had were mainly on the positioning of the numbers of the days of the month under the corresponding day, and figuring out how to code the function that calculated the first day of a given year. Unfortunately, I also had a problem with my VM since it said that it did not have any more disk space and then it was not responding. As a result, I lost and had to redo some of my work which was pretty frustrating… I will have submitted my work through another computer, so I will try to solve this problem after my submission, hopefully with the help of the course’s staff.

 

In order to run program in command shell:

1) Compile:   gcc –Wall –o PA1 PA1.c

2) Run:   ./a.out

3) Year Input


